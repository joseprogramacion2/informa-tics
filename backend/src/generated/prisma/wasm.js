
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsuarioScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  usuario: 'usuario',
  correo: 'correo',
  contrasena: 'contrasena',
  estado: 'estado',
  creadoEn: 'creadoEn',
  actualizadoEn: 'actualizadoEn',
  debeCambiarPassword: 'debeCambiarPassword',
  rolId: 'rolId'
};

exports.Prisma.RolScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre'
};

exports.Prisma.PermisoScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  descripcion: 'descripcion'
};

exports.Prisma.PermisoPorRolScalarFieldEnum = {
  id: 'id',
  permisoId: 'permisoId',
  rolId: 'rolId'
};

exports.Prisma.PermisoUsuarioScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  permisoId: 'permisoId'
};

exports.Prisma.PasswordHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  hash: 'hash',
  createdAt: 'createdAt'
};

exports.Prisma.CategoriaScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  activo: 'activo',
  creadoEn: 'creadoEn',
  tipo: 'tipo'
};

exports.Prisma.PlatilloScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  precio: 'precio',
  creadoEn: 'creadoEn',
  disponible: 'disponible',
  imagenUrl: 'imagenUrl',
  categoriaId: 'categoriaId'
};

exports.Prisma.HistorialModificacionScalarFieldEnum = {
  id: 'id',
  campo: 'campo',
  valorAnterior: 'valorAnterior',
  valorNuevo: 'valorNuevo',
  fecha: 'fecha',
  accion: 'accion',
  responsableId: 'responsableId',
  usuarioId: 'usuarioId',
  platilloId: 'platilloId'
};

exports.Prisma.MesaScalarFieldEnum = {
  id: 'id',
  numero: 'numero',
  capacidad: 'capacidad',
  estado: 'estado',
  reservadaPor: 'reservadaPor',
  activa: 'activa',
  creadoEn: 'creadoEn',
  actualizadoEn: 'actualizadoEn'
};

exports.Prisma.ReservaScalarFieldEnum = {
  id: 'id',
  mesaId: 'mesaId',
  fechaHora: 'fechaHora',
  hastaHora: 'hastaHora',
  nombre: 'nombre',
  telefono: 'telefono',
  email: 'email',
  nota: 'nota',
  monto: 'monto',
  estado: 'estado',
  pagoEstado: 'pagoEstado',
  pagoMetodo: 'pagoMetodo',
  pagoReferencia: 'pagoReferencia',
  pagadoEn: 'pagadoEn',
  canceladaEn: 'canceladaEn',
  refundEstado: 'refundEstado',
  refundMonto: 'refundMonto',
  refundEn: 'refundEn',
  refundMotivo: 'refundMotivo',
  verificadaPorMeseroId: 'verificadaPorMeseroId',
  verificadaEn: 'verificadaEn',
  aplicadoEnOrdenId: 'aplicadoEnOrdenId',
  aplicadoEnPagoId: 'aplicadoEnPagoId',
  creadoEn: 'creadoEn',
  actualizadoEn: 'actualizadoEn'
};

exports.Prisma.OrdenScalarFieldEnum = {
  id: 'id',
  codigo: 'codigo',
  mesa: 'mesa',
  fecha: 'fecha',
  finishedAt: 'finishedAt',
  durationSec: 'durationSec',
  meseroId: 'meseroId',
  estado: 'estado',
  totalPagado: 'totalPagado',
  anticipo: 'anticipo'
};

exports.Prisma.OrdenItemScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  precio: 'precio',
  nota: 'nota',
  tipo: 'tipo',
  estado: 'estado',
  qty: 'qty',
  subtotal: 'subtotal',
  creadoEn: 'creadoEn',
  asignadoEn: 'asignadoEn',
  preparandoEn: 'preparandoEn',
  finalizadoEn: 'finalizadoEn',
  prioridad: 'prioridad',
  pagado: 'pagado',
  ordenId: 'ordenId',
  chefId: 'chefId',
  bartenderId: 'bartenderId',
  ticketVentaId: 'ticketVentaId'
};

exports.Prisma.CocinaChefScalarFieldEnum = {
  id: 'id',
  chefId: 'chefId',
  activo: 'activo',
  lastSeen: 'lastSeen'
};

exports.Prisma.BarraBartenderScalarFieldEnum = {
  id: 'id',
  bartenderId: 'bartenderId',
  activo: 'activo',
  lastSeen: 'lastSeen'
};

exports.Prisma.TicketVentaScalarFieldEnum = {
  id: 'id',
  ordenId: 'ordenId',
  cajeroId: 'cajeroId',
  fechaPago: 'fechaPago',
  metodoPago: 'metodoPago',
  subtotal: 'subtotal',
  impuestos: 'impuestos',
  descuentos: 'descuentos',
  totalAPagar: 'totalAPagar',
  montoRecibido: 'montoRecibido',
  cambio: 'cambio',
  anticipoAplicado: 'anticipoAplicado',
  propina: 'propina',
  serie: 'serie',
  numero: 'numero',
  clienteNombre: 'clienteNombre',
  clienteNit: 'clienteNit',
  snapshot: 'snapshot',
  estado: 'estado',
  anuladoEn: 'anuladoEn',
  anuladoPorId: 'anuladoPorId',
  anuladoMotivo: 'anuladoMotivo',
  posCorrelativo: 'posCorrelativo'
};

exports.Prisma.EgresoCajaScalarFieldEnum = {
  id: 'id',
  creadoEn: 'creadoEn',
  estado: 'estado',
  cajeroId: 'cajeroId',
  monto: 'monto',
  motivo: 'motivo',
  autorizadoPorId: 'autorizadoPorId',
  autorizadoEn: 'autorizadoEn',
  observacion: 'observacion'
};

exports.Prisma.PedidoClienteScalarFieldEnum = {
  id: 'id',
  codigo: 'codigo',
  clienteEmail: 'clienteEmail',
  creadoEn: 'creadoEn',
  estado: 'estado',
  repartidorId: 'repartidorId',
  tipoEntrega: 'tipoEntrega',
  metodoPago: 'metodoPago',
  direccion: 'direccion',
  telefono: 'telefono',
  receptorNombre: 'receptorNombre',
  deliveryStatus: 'deliveryStatus',
  readyAt: 'readyAt',
  assignedAt: 'assignedAt',
  startedAt: 'startedAt',
  deliveredAt: 'deliveredAt',
  total: 'total',
  ordenId: 'ordenId'
};

exports.Prisma.ObservacionEntregaScalarFieldEnum = {
  id: 'id',
  pedidoId: 'pedidoId',
  repartidorId: 'repartidorId',
  texto: 'texto',
  createdAt: 'createdAt'
};

exports.Prisma.PedidoClienteItemScalarFieldEnum = {
  id: 'id',
  pedidoId: 'pedidoId',
  platilloId: 'platilloId',
  nombre: 'nombre',
  precio: 'precio',
  qty: 'qty',
  nota: 'nota'
};

exports.Prisma.MeseroNotifScalarFieldEnum = {
  id: 'id',
  creadoEn: 'creadoEn',
  visto: 'visto',
  ordenId: 'ordenId',
  itemNombre: 'itemNombre',
  tipo: 'tipo',
  meseroId: 'meseroId'
};

exports.Prisma.RepartidorNotifScalarFieldEnum = {
  id: 'id',
  creadoEn: 'creadoEn',
  visto: 'visto',
  tipo: 'tipo',
  titulo: 'titulo',
  cuerpo: 'cuerpo',
  repartidorId: 'repartidorId',
  pedidoId: 'pedidoId'
};

exports.Prisma.CajaTurnoScalarFieldEnum = {
  id: 'id',
  cajeroId: 'cajeroId',
  estado: 'estado',
  montoApertura: 'montoApertura',
  conteoInicial: 'conteoInicial',
  solicitadoEn: 'solicitadoEn',
  autorizadoPorId: 'autorizadoPorId',
  autorizadoEn: 'autorizadoEn',
  montoCierre: 'montoCierre',
  conteoFinal: 'conteoFinal',
  cierreSolicitadoEn: 'cierreSolicitadoEn',
  cierreAutorizadoPorId: 'cierreAutorizadoPorId',
  cierreAutorizadoEn: 'cierreAutorizadoEn',
  cerradoEn: 'cerradoEn'
};

exports.Prisma.CalificacionPedidoScalarFieldEnum = {
  id: 'id',
  pedidoId: 'pedidoId',
  comida: 'comida',
  repartidor: 'repartidor',
  atencionCliente: 'atencionCliente',
  comentario: 'comentario',
  comidaOpciones: 'comidaOpciones',
  repartidorOpciones: 'repartidorOpciones',
  atencionOpciones: 'atencionOpciones',
  creadoEn: 'creadoEn',
  actualizadoEn: 'actualizadoEn'
};

exports.Prisma.SettingScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.CategoriaTipo = exports.$Enums.CategoriaTipo = {
  COMESTIBLE: 'COMESTIBLE',
  BEBIBLE: 'BEBIBLE'
};

exports.MesaEstado = exports.$Enums.MesaEstado = {
  DISPONIBLE: 'DISPONIBLE',
  OCUPADA: 'OCUPADA',
  RESERVADA: 'RESERVADA'
};

exports.ReservaEstado = exports.$Enums.ReservaEstado = {
  PENDIENTE: 'PENDIENTE',
  CONFIRMADA: 'CONFIRMADA',
  CANCELADA: 'CANCELADA',
  CUMPLIDA: 'CUMPLIDA'
};

exports.PagoEstado = exports.$Enums.PagoEstado = {
  PENDIENTE: 'PENDIENTE',
  PAGADO: 'PAGADO',
  FALLIDO: 'FALLIDO'
};

exports.RefundEstado = exports.$Enums.RefundEstado = {
  NO_APLICA: 'NO_APLICA',
  PENDIENTE: 'PENDIENTE',
  PROCESADO: 'PROCESADO',
  RECHAZADO: 'RECHAZADO'
};

exports.OrdenEstado = exports.$Enums.OrdenEstado = {
  EN_ESPERA: 'EN_ESPERA',
  EN_PREPARACION: 'EN_PREPARACION',
  TERMINADA: 'TERMINADA',
  PENDIENTE_PAGO: 'PENDIENTE_PAGO',
  PAGADA: 'PAGADA',
  CANCELADA: 'CANCELADA'
};

exports.MetodoPago = exports.$Enums.MetodoPago = {
  EFECTIVO: 'EFECTIVO',
  TARJETA: 'TARJETA'
};

exports.ComprobanteEstado = exports.$Enums.ComprobanteEstado = {
  VALIDO: 'VALIDO',
  ANULADO: 'ANULADO'
};

exports.EgresoEstado = exports.$Enums.EgresoEstado = {
  PENDIENTE: 'PENDIENTE',
  APROBADO: 'APROBADO',
  RECHAZADO: 'RECHAZADO'
};

exports.TipoEntrega = exports.$Enums.TipoEntrega = {
  LOCAL: 'LOCAL',
  DOMICILIO: 'DOMICILIO'
};

exports.DeliveryStatus = exports.$Enums.DeliveryStatus = {
  PEND_PREPARACION: 'PEND_PREPARACION',
  EN_PREPARACION: 'EN_PREPARACION',
  LISTO_PARA_ENTREGA: 'LISTO_PARA_ENTREGA',
  LISTO_PARA_RECOGER: 'LISTO_PARA_RECOGER',
  ASIGNADO_A_REPARTIDOR: 'ASIGNADO_A_REPARTIDOR',
  EN_CAMINO: 'EN_CAMINO',
  ENTREGADO: 'ENTREGADO',
  CANCELADO: 'CANCELADO'
};

exports.CajaTurnoEstado = exports.$Enums.CajaTurnoEstado = {
  PENDIENTE: 'PENDIENTE',
  ABIERTA: 'ABIERTA',
  RECHAZADA: 'RECHAZADA',
  CIERRE_PENDIENTE: 'CIERRE_PENDIENTE',
  CERRADA: 'CERRADA'
};

exports.Prisma.ModelName = {
  Usuario: 'Usuario',
  Rol: 'Rol',
  Permiso: 'Permiso',
  PermisoPorRol: 'PermisoPorRol',
  PermisoUsuario: 'PermisoUsuario',
  PasswordHistory: 'PasswordHistory',
  Categoria: 'Categoria',
  Platillo: 'Platillo',
  HistorialModificacion: 'HistorialModificacion',
  Mesa: 'Mesa',
  Reserva: 'Reserva',
  Orden: 'Orden',
  OrdenItem: 'OrdenItem',
  CocinaChef: 'CocinaChef',
  BarraBartender: 'BarraBartender',
  TicketVenta: 'TicketVenta',
  EgresoCaja: 'EgresoCaja',
  PedidoCliente: 'PedidoCliente',
  ObservacionEntrega: 'ObservacionEntrega',
  PedidoClienteItem: 'PedidoClienteItem',
  MeseroNotif: 'MeseroNotif',
  RepartidorNotif: 'RepartidorNotif',
  CajaTurno: 'CajaTurno',
  CalificacionPedido: 'CalificacionPedido',
  Setting: 'Setting'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
